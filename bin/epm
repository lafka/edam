#!/usr/bin/env escript

%% -*- mode: erlang;
%% ex: ft=erlang et

-define(lib(Name, Vsn), "lib/" ++ Name ++ $- ++ Vsn).

main([]) ->
    target(["help"], []);
main(Args) ->
    try
        Dir = get_codepath(escript:script_name()),
        true = code:add_path(filename:join([Dir, "ebin"])),
        epm:init([{basedir, Dir}]),
        case parse_args(Args, []) of
            {ok, Opts} ->
                {Cmd0, Opts2} = lists:partition(fun(
                      [$-|_]) -> false; (_) -> true end
                    , Opts),
                Cmd = lists:reverse(Cmd0),
                epm:log(debug, "args: ~p, cmd: ~p, inner: ~p", [Args, Cmd, Opts2]),
                {ok, _} = epm_store:start_link(),
                target(Cmd, Opts2),
                ok = gen_server:call(epm_store, stop);
            error ->
                ok
        end
    catch Class:Reason ->
        io:format("~nCaught exception: ~p:~n~69..=s~n~s", [{Class, Reason}, "="
            , eunit_lib:format_exception({Class,Reason,erlang:get_stacktrace()})])
    end.

parse_args([], Acc) -> {ok, Acc};
parse_args(_, error) -> error;
parse_args(["--debug" | T], Acc) ->
    epm:set_env(log_level, debug),
    parse_args(T, Acc);
parse_args(["--notice" | T], Acc) ->
    epm:set_env(log_level, notice),
    parse_args(T, Acc);
parse_args(["--quiet" | T], Acc) ->
    epm:set_env(log_level, error),
    parse_args(T, Acc);
parse_args(["-d" | T], Acc) ->
    epm:set_env(dryrun, true),
    epm:log(info, "epm: using dry-run, nothing will be done"),
    parse_args(T, Acc);
parse_args(["--rebar" | T], Acc) ->
    epm:set_env(rebar_compatability, true),
    epm:set_env(append_versions, false),
    epm:set_env(libdir, "deps"),
    epm:log(info, "epm: setting rebar compatability"),
    parse_args(T, Acc);
parse_args(["--env", Env | T], Acc) ->
    epm:log(info, "epm: using env '~s'", [Env]),
    epm:set_env(env, list_to_binary(Env)),
    parse_args(T, Acc);
parse_args([Arg | T], Acc) ->
    parse_args(T, [Arg | Acc]).

get_codepath([$/|_] = File) ->
    filename:dirname(filename:dirname(File));
get_codepath(File) ->
    {ok, Base} = file:get_cwd(),
    filename:dirname(filename:dirname(filename:join(Base, File))).

usage() ->
    io:format("epm {build|deps|sign|key}~n"
        "~n"
        "  Commands:~n"
        "==========================================================~n"
        "~n"
        "= build~n"
        "  Build something, you should use make/rebar/sinan/erlc/emake.~n"
        "~n"
        "= deps {search|fetch|update|check|print|help}~n"
        "  Find, check, manage and display dependencies.~n"
        "~n"
        "= key {import|revoke|generate|list|help}~n"
        "  Key management for remote repositories and signing.~n"
        "~n"
        "= sign~n"
        "  Sign your source code for releases.~n"
        "~n"
        " OPTIONS:~n"
        "==========================================================~n"
        "~n"
        " --debug        Set output level to debug~n"
        " --notice       Set output level to notice~n"
        " --quiet        Only output errors~n"
        " -d, --dry-run  Dry run, don't actually do anything~n"
        " --rebar        Use rebar compatability~n"
        " --env <env>    Match EPM config against specific env~n"
        ).

target(["help" | _], _Opts) ->
    usage();

target(["build"], _Opts) ->
    epm:log(info, "building~n");

target(["deps"], Opts) ->
    target(["deps", "sync"], Opts);

target(["deps", "help" | _], _Opts) ->
    io:format("epm deps {search|fetch|update|check|print|help}~n"
        "~n"
        "= search <package>~n"
        "  Search all repositories for package.~n"
        "~n"
        "= fetch [<package>,..]~n"
        "  Fetch one or more packages to local store for later use.~n"
        "  This operation will not update your source dependencies.~n"
        "~n"
        "= sync [package]~n"
        "  Update all repositories, optionaly only update [package]~n"
        "  if specified.~n"
        "~n"
        "= check [package]~n"
        "  Performs a non-destructiv check of dependencies.~n"
        "~n"
        "= print [package]~n"
        "  Print out the current status for all your dependencies.~n"
        "  If package is given the configuration for that package~n"
        "  will be used.~n"
        "~n"
        "  --format=\"<fmt>\" can be used for custom printing"
        "~n"
       );

target(["deps", "search"], _Opts) ->
    io:format("deps search: you must specify search phrase~n");

target(["deps", "search", _Phrase], _Opts) ->
    epm:log(error, "deps search: not implemented");

target(["deps", "fetch"], Opts) ->
    target(["deps", "fetch", "."], Opts);

target(["deps", "fetch", Path], _Opts) ->
    {ok, Cfg} = epm:parse(Path),
    epm_pkg:foreach(fun(Pkg) ->
        epm_pkg:fetch(Pkg, epm:set(opt, {ignore_codepath, true}, Cfg))
    end, Cfg);

target(["deps", "sync"], Opts) ->
    target(["deps", "sync", "."], Opts);

target(["deps", "sync", Path], _Opts0) ->
    {ok, Cfg} = epm:parse(Path),
    epm:log(debug, "syncing ~b packages", [length(epm:get(deps, Cfg))]),
    Fetch = fun(Pkg, Fun) ->
        epm_pkg:foreach(fun(Dep) ->
            case epm_pkg:sync(Dep, Cfg) of
                ok -> ok;
                {error, Err} ->
                    epm:log(error, "sync: ~s:~s=~s, ~p"
                        , epm_pkg:get([catalog, name, version], Pkg)
                            ++ Err)
            end,
            Fun(Dep, Fun) end,
        Pkg)
    end,
    epm_pkg:foreach(fun(Pkg) -> Fetch(Pkg, Fetch) end, Cfg);

target(["deps", "check"], Opts) ->
    target(["deps", "check", "."], Opts);

target(["deps", "check", Path], _Opts0) ->
    epm:set_env(autofetch, false), %% @todo 2013-04-19 move into cfg
    {ok, Cfg} = epm:parse(Path),
    epm_pkg:foreach(fun(Pkg) ->
        epm_pkg:fetch(Pkg, Cfg)
    end, Cfg);

target(["deps", "print"], Opts) ->
    target(["deps", "print", "."], Opts);

target(["deps", "print", Path], Opts) ->
    printer(Path, Opts, []);

target(["deps" | Arg], _Opts) ->
    io:format("epm deps: unknown command: ~p~n", [Arg]),
    target(["deps", "help"], []);

target(["sign"], _Opts) ->
    epm:log(error, "sign: not implemented");

target(["key"], Opts) ->
    target(["key", "help"], Opts);

target(["key", "help"|_], _Opts) ->
    io:format("epm key {import|revoke|generate|list|help}~n"
        "~n"
        "= import~n"
        "  Add a key to your keychain.~n"
        "~n"
        "= revoke~n"
        "  Remove a trusted key from your keychain.~n"
        "~n"
        "= generate~n"
        "  Generate a new key used for signing.~n"
        "~n"
        "= list~n"
        "  List all trusted keys.~n"
        "~n");

target(["key", "import"], _Opts) ->
    epm:log(error, "key import: not implemented");

target(["key", "revoke"], _Opts) ->
    epm:log(error, "key revoke: not implemented");

target(["key", "generate"], _Opts) ->
    epm:log(error, "key generate: not implemented");

target(["key", "list"], _Opts) ->
    epm:log(error, "key generate: not implemented");

target(Args, _Opts) ->
    io:format("unknown command ~p~n~n", [Args]),
    usage().


printer(Path, ["--format=" ++ Fmt | T], Opts) ->
    printer(Path, T, [{format, Fmt} | Opts]);
printer(Path, [_H | T], Opts) ->
    epm:log(debug, "ignore opt: ~p", [_H]),
    printer(Path, T, Opts);
printer(Path, [], Opts) ->
    epm:set_env(autofetch, false),

    {ok, _} = epm:parse(Path),
    {ok, Cfgs} = epm_store:list(),

    epm:log(debug, "configs: ~p", [Cfgs]),

    Fmt = proplists:get_value(format, Opts
        , "%t= %=name=%=version (%=agent.ref#%=agent.remote)"),

    lists:foreach(fun(AbsName) ->
        io:format("~n:: Config (~s)~n", [filename:join(AbsName)]),

        {ok, Cfg} = epm_store:get(AbsName),

        Deps = epm:get(pkgs, Cfg),
        case Deps of
            [] ->
                io:format("   No packages found in config~n");
            Deps ->
                lists:foreach(fun(Dep) -> print_pkg(Fmt, Dep) end, Deps)
        end
    end, Cfgs).

print_pkg(Fmt0, Pkg) ->
    Fmt = re:split(Fmt0, "(%=[a-z0-9_.]+|%[a-zA-Z])", [trim]),
    io:format(" "),
    print_expander(Fmt, Pkg),
    io:format("~n"),
    epm_pkg:foreach(fun(Dep) -> print_pkg(Fmt0, Dep) end, Pkg).

%% expansions:
%% %t        -> N number of spaces where N =:= depth
%% %c        -> List of catalog names
%% %=<ident> -> A direct call to epm_pkg(get, _)
print_expander([], _Pkg) ->
    ok;
print_expander([<<"%t">> | Tail], Pkg) ->
    N = integer_to_list(length(epm_pkg:get(absname, Pkg)) - 1),
    io:format("~" ++ N ++ ".s", [" "]),
    print_expander(Tail, Pkg);
print_expander([<<"%c">> | Tail], Pkg) ->
    io:format("~p", [epm_pkg:get(catalog, Pkg)]),
    print_expander(Tail, Pkg);
print_expander([<<"%=", K/binary>> | Tail], Pkg) ->
    Key = case [binary_to_atom(P, unicode) || P <- binary:split(K, <<$.>>)] of
		[K0] -> K0;
		K0 -> list_to_tuple(K0)
	end,
    io:format("~s", [epm_pkg:get(Key, Pkg)]),
    print_expander(Tail, Pkg);
print_expander([Part | Tail], Pkg) ->
    io:format(Part),
    print_expander(Tail, Pkg).


%    io:format("Catalogs (~b):~n", [length(epm:get(catalogs, Cfg))]),
%    epm_catalog:foreach(fun(Ct) ->
%        [CtMod, Pkgs] = epm_catalog:get([module, pkgs], Ct),
%        Args = epm_catalog:get([name, resource], Ct)
%             ++ [CtMod:name(), length(Pkgs)],
%        io:format("= ~s.~s (~s: ~b packages)~n", Args)
%    end, Cfg),
